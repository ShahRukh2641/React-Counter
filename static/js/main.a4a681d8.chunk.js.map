{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","totalCounters","Counter","_this","this","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDelete","id","classes","value","Component","Counters","_this$props","onReset","counters","onDecrement","map","components_counter","key","App","state","handleDelete","counterId","filter","c","setState","handleReset","handleIncrement","Object","toConsumableArray","index","indexOf","objectSpread","Fragment","navbar","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4a681d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst Navbar = props =>{\r\n    return (     \r\n        <nav className=\"navbar navbar-light bg-light\">\r\n               <a className=\"navbar-brand\" href=\"#\">Navbar\r\n               <span className=\"badge badge-pill badge-secondary m-2\">\r\n               {props.totalCounters}</span>\r\n               </a>\r\n       </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\n\r\n\r\nclass Counter extends Component {\r\n\r\n    render() { \r\n        return (\r\n        <div>\r\n            <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n            <button onClick={() =>this.props.onIncrement(this.props.counter)} className=\"btn btn-secondary btn-sm m-2\">+</button>\r\n            <button onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-danger btn-sm\">Delete</button>\r\n\r\n        </div>\r\n        );\r\n    }\r\n\r\n    getBadgeClasses() {\r\n        let classes = \"badge m-2 badge-\";\r\n        classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n        return classes;\r\n    }\r\n\r\n    formatCount() {\r\n        const {value} = this.props.counter;\r\n        return value === 0 ? \"Zero\" : value;\r\n        }\r\n\r\n\r\n}\r\n\r\n\r\n \r\nexport default Counter;","import React, { Component } from 'react';\r\nimport Counter from './counter';\r\n\r\nclass Counters extends Component {\r\n    \r\n    render() { \r\n        const {onReset, counters, onDelete, onIncrement, onDecrement} = this.props;\r\n        return ( <div>\r\n            <button className=\"btn btn-primary btn-sm m-2\" onClick={onReset}>Reset</button>\r\n            {counters.map(counter =>(<Counter key={counter.id} counter={counter} \r\n            onDelete={onDelete} \r\n            onIncrement={onIncrement}\r\n            />))}\r\n        </div> );\r\n    }\r\n}\r\n \r\nexport default Counters;","import React, { Component } from 'react';\nimport Navbar from './components/navbar';\nimport './App.css';\nimport Counters from './components/counters';\n\nclass App extends Component {\n  state = {\n    counters :[\n        {id:1, value:0},\n        {id:2, value:0},\n        {id:3, value:0},\n        {id:4, value:0}\n    ]\n}\n\nhandleDelete =(counterId)=>{\n    const counter = this.state.counters.filter(c => c.id !== counterId)\n    this.setState({counters : counter});\n};\n\nhandleReset =() =>{\n    const counter = this.state.counters.map(\n        c=> {c.value = 0;\n        return c;\n    });\n    this.setState({counters:counter});\n}\n\nhandleIncrement=(counter)=>{\n    const counters = [...this.state.counters]\n    const index = counters.indexOf(counter);\n    counters[index] = {...counter};\n    counters[index].value++;\n    this.setState({counters});\n}\n\n  render() {\n    return (\n        <React.Fragment>\n          <Navbar totalCounters={this.state.counters.filter(c =>c.value>0).length}/>\n          <main className=\"container\">\n              <Counters  \n              counters={this.state.counters}\n              onReset={this.handleReset} \n              onIncrement={this.handleIncrement}  \n              onDelete={this.handleDelete}/>\n          </main>\n        </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}